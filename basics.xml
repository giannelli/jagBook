<?xml version="1.0" encoding="UTF-8" ?>
<chapter xml:id="basics">
    <title>Basic Sage Commands</title>

    <introduction>
        <p>Here you will find a hotch potch of some basic SageMath concepts</p>
    </introduction>

    <section>
        <title>How to define functions</title>

        <sage>
            <input>
                def f(z): return 2*z^3 - z^2 - 7*z + 2
                type(f)
            </input>
            <output>
                &lt;type 'function'&gt;
            </output>
        </sage>

        <sage>
            <input>
                f(2)
            </input>
            <output>
                0
            </output>
        </sage>

        <sage>
            <input>
                plot(f, -2, 3)
            </input>
        </sage>

        <sage>
            <input>
                f(x) = (cos(x)-1)/x^2
                show(f)
            </input>
        </sage>
        <sage>
            <input>
                f(3)
            </input>
            <output>
                1/9*cos(3) - 1/9
            </output>
        </sage>
        <sage>
            <input>
                show(f(pi))
            </input>
            <output>
                -2/pi^2
            </output>
        </sage>
        <sage>
            <input>
                plot(f(x), (-2*pi, 2*pi),ymin = -1, ymax = 1)
            </input>
        </sage>
    </section>

    <section>
        <title>Symbolic Manipulation</title>

        <p>Sage not only solves equations numerically but also allows for symbolic manipulation. The page will give several illustrative examples.</p>
        <p>The expand method</p>
        <sage>
            <input>
                z = (x+1)^3
                show(z)
            </input>
            <output>(x+1)^3</output>
        </sage>

        <sage>
            <input>
                z2 = z.expand()
                show(z2)
            </input>
            <output>x^3 + 3*x^2 + 3*x + 1</output>
        </sage>
        <p>Notice how the <code>show()</code> method displays the output in a nicer manner. Without it you will see the
            less pretty output:
            <pre>x^3 + 3*x^2 + 3*x + 1</pre>
        </p>

        <p>Now the reverse! Perform a <code>factor()</code> on the expanded equation.
        </p>
        <sage>
            <input>
                show(z2.factor())
            </input>
            <output>x^3 + 3*x^2 + 3*x + 1</output>
        </sage>
    </section>

    <section>
        <title>Declaring Variables and Plotting</title>

        <p>Sage allows us to solve equations not only numerically but <en>symbolically</en>.
            To make this possible we have to be able to define variables that are used in the symbolic manipulation.</p>
        <p>We will demonstrate this using a complete differential equation example. Taking this approach has the additional
        advantage of introducing some other Sage methods.</p>

        <subsection>
            <title>Use SageMath to solve differential equations</title>

            <p>First we have to know how to describe a differential equation (DE) with Sage.
                The syntax may not be obvious but the are ample examples in the documentation.</p>

            <p>Sage can solve a large class of first-order and second-order Ordinary Differential Equations (ODEs) as
                well as Initial Value Problems (IVPs). The chapter on differential equations <xref ref="differential" autoname="yes" /> will
                go into more details.  This particular example just uses DE to illustrate how variables are declared and used.
            </p>

            <sage>
                <input>
                    var('a b c x y z')
                </input>
                <output>(a, b, c, x, y, z)</output>
            </sage>

            <p>For this first example, I'll express the differential equation using common mathematical notation, then
                enter it into Sage using Sage's notation. Here's the mathematical notation for our example:
            </p>

            <men>y(t) + rcy'(t) = 0</men>
            <men>y(0) = 1</men>

            <p>This expression says that the unknown function (the function to be found) produces the sum of y(t) and r
                c y'(t) for any time t, and that the initial value of the function at time zero is 1. (The meaning of r
                and c will become clear after a bit.) This is an example of a differential equation that specifies an
                initial value, as many do. In this case I intend to scale the result after acquiring the result, and
                this initial value makes that easy. Here is how I submit this differential equation to Sage:
            </p>


        </subsection>
        <p>(From
            <url href="http://arachnoid.com/sage/differential1.html#Second_Example">P Lutus - Applying Sage to physics</url>)
        </p>
        <sage>
            <input>
                var('r c t')
                y = function('y')(t)
                de = y + r*c*diff(y,t) == 0
                des = desolve(de,[y,t],[0,1]);des
            </input>
            <output>e^(-t/(c*r))</output>
        </sage>

        <p>Or in the prettier format:</p>
        <sage>
            <input>
                show(des)
            </input>
            <output>e^(-t/(c*r))</output>
        </sage>

        <p>Let us break this entry down:

            <ul>
                <li>
                    <code>var('r c t')</code> tells Sage to pre-declare the variables that will be used.
                </li>
                <li>
                    <m>y = function('y')(t)</m>
                    tells Sage that <m>y</m> is a function of <m>t</m>, e.g. as though every time we type <m>y</m> we mean <m>
                    y(t)</m>.
                    This is a way to identify <m>y</m> as a function, not just a variable, and associate it with <m>t</m>.
                </li>
                <li>
                    <m>de = y + r*c*diff(y,t) == 0</m>
                    creates a variable <m>de</m> that contains one of the statements of the DE.
                </li>
                <li>
                    <m>des = desolve(de,[y,t],[0,1])</m>
                    invokes the Sage DE solver using our definition <m>de</m> as an argument, and:
                </li>

                <li>
                    <m>[y,t]</m>
                    identifies <m>y</m> as the function of interest and <m>t</m> as the dependent variable
                </li>
                <li>
                    <m>[0,1]</m>
                    sets the initial conditions: at <m>t = 0, y = 1</m>, or as we expressed it above, "<m>y(0) =1</m>".
                </li>
            </ul>

            <p>Now let us plot this</p>
            <sage>
                <input>
                    f(t,r,c) = des
                    plot(f(t,1,1),(t,0,5),figsize=(4,3))
                </input>
                <output>e^(-t/(c*r))</output>
            </sage>

            <p>Let us now take a more general solution.</p>
            <sage>
                <input>
                    f(t,a,b,r,c) = (a-b) * des + b
                    show(f)
                    lbl = text("$RC \, Circuit, \, r = 10000\Omega, \, c = 100\mu f $",(3,3),fontsize=12,rgbcolor='#006000')
                    p = plot(f(t,0,10,10000,100e-6),(t,0,5), figsize=(4,3),axes_labels=['time','v'])
                    show(p+lbl)
                </input>
                <output>e^(-t/(c*r))</output>
            </sage>
        </p>
    </section>

    <section>
        <title>Sage and Python<index><main>Python, Sage and</main></index></title>

        <p>
            Sage is built on top of <url href="https://www.python.org/">Python</url>. It will do no harm to find
            out a little about this programming language and will aid your understanding of some of the
            examples used in this manual.
        </p>

        <subsection>
            <title>Lists, Tuples, and Dictionaries</title>

            <p>Python has a number of built in data types. We will look at three that will come up again and again
            in this manual.</p>

            <subsubsection>
                <title>Lists<index><main>Python</main><sub>Lists</sub></index></title>

                <p>Creating Lists<index><main>Python</main><sub>Creating Lists</sub></index></p>

                <ol>
                    <li>
                        <p>To create a list of items then use the <em>[]</em> operator filled with the items:</p>
                        <sage>
                            <input>
                                # Creating lists with Python
                                listTransport = ['car', 'bus', 'train', 'plane', 'ship']
                                print("A list of vehicles: " + str(listTransport))

                                listNumbers = [5, 7, 9, 11, 13]
                                print("Some odd numbers: " + str(listNumbers))
                            </input>
                            <output>
                                A list of vehicles: ['car', 'bus', 'train', 'plane', 'ship']
                                Some odd numbers: [5, 7, 9, 11, 13]
                            </output>
                        </sage>
                    </li>
                    <li>
                        <p>Creating an empty list and then adding items.</p>
                        <sage>
                            <input>
                                myList = []
                                print("Empty list: " + str(myList))
                                myList.append('Car')
                                myList.append(100)
                                print("After appending some items: " + str(myList))
                            </input>
                            <output>
                                Empty list: []
                                After appending some items: ['Car', 100]
                            </output>
                        </sage>
                        <p>Notice that the items inside the list can be different <em>types</em>.
                            In this cas a <em>sting</em> and a <em>number</em>.</p>
                    </li>
                    <li>
                        <p>Creating lists using python methods.</p>
                        <sage>
                            <input>
                                myBigList = list()
                                myBigList.extend(myList)
                                print("List after extending: " + str(myBigList))
                                myBigList.append(listTransport)
                                print("List after appending another list:" + str(myBigList))

                                listNumbers = range(1, 31, 5)
                                print("A list of integers: " + str(listNumbers))
                            </input>
                            <output>
                                List after extending: ['Car', 100]
                                List after appending another list:['Car', 100, ['car', 'bus', 'train', 'plane', 'ship']]
                                A list of integers: [1, 6, 11, 16, 21, 26]
                            </output>
                        </sage>
                        <p>This is not a python tutorial so have a look <url href="https://docs.python.org/3/library/functions.html">here</url> for more information on
                            <code>range()</code> and <code>append()</code>.</p>
                    </li>
                </ol>

                <p>Accessing items in a list
                    <index>
                        <main>Python</main>
                        <sub>Accessing Lists</sub>
                    </index>
                </p>

                <p><url href="https://docs.python.org/3/tutorial/datastructures.html">Indexing and slicing lists</url>.
                </p>
                <sage>
                    <input>
                        myList = ['First', 'Second', 'Third', 'Fourth', 'Fifth']
                        print("A list of words: " + str(myList))

                        print("\nIndices start at '0'")
                        print("myList[0] = " + str(myList[0]))

                        print("\nSecond item to the Fourth item (includes index 1 up to but not including 4")
                        print("myList[1:4] = " + str(myList[1:4]))


                        print("\nSecond to last items")
                        print("myList[1:] = " + str(myList[1:]))

                        print("\nAll items from the first to the fourth")
                        print("myList[:4] = " + str(myList[:4]))

                        print("\nThe last item")
                        print("myList[-1] = " + str(myList[-1]))

                        print("\nThe last three items")
                        print("myList[-3:] = " + str(myList[-3:]))
                    </input>
                    <output>
                        A list of words: ['First', 'Second', 'Third', 'Fourth', 'Fifth']

                        Indices start at '0'
                        myList[0] = First

                        Second item to the Fourth item (includes inex 1 upto but not including 4
                        myList[1:4] = ['Second', 'Third', 'Fourth']

                        Second to last items
                        myList[1:] = ['Second', 'Third', 'Fourth', 'Fifth']

                        All items from the first to the fourth
                        myList[:4] = ['First', 'Second', 'Third', 'Fourth']

                        The last item
                        myList[-1] = Fifth

                        The last three items
                        myList[-3:] = ['Third', 'Fourth', 'Fifth']
                    </output>
                </sage>
            </subsubsection>
            <subsubsection>
                <title>Tuples
                    <index>
                        <main>Python</main>
                        <sub>Tuples</sub>
                    </index>
                </title>

               <p>
                   A tuple is an immutable list. A tuple can not be changed in once it is created.
               </p>

                <p>
                    Tuples are defined exactly like lists except by using <m>()</m> brackets rather than <m>[]</m> brackets.
               </p>
                <sage>
                    <input>
                        t = ("First", "Second", "anna", "paula", "john")
                        print("A tuple: " + str(t))

                        print("\nFirst item")
                        print("t[0] " + str(t[0]))

                        print("\nLast item")
                        print("t[-1] = " + str(t[-1]))

                        print("\nThird to last item")
                        print("t[2:5] = " + str(t[2:5]))

                        print("\nThird to last items (alternate)")
                        print("t[2:] = " + str(t[2:]))
                    </input>
                    <output>
                        A tuple: ('First', 'Second', 'anna', 'paula', 'john')

                        First item
                        t[0] First

                        Last item
                        t[-1] = john

                        Third to last item
                        t[2:5] = ('anna', 'paula', 'john')

                        Third to last items (alternate)
                        t[2:] = ('anna', 'paula', 'john')
                    </output>
                </sage>

                <p>Tuples are handy structures for thing like <m>(x,y,z)</m> coordinates and are used extensively
                    in the examples and exercises in this manual.  For example, as co-ordinate ranges for plots.
                    See for example <xref ref="plot_tangentline">the utility method <code>plot_tangentline()</code></xref>.</p>
            </subsubsection>
        </subsection>
    </section>

</chapter>
