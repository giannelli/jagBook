<?xml version="1.0" encoding="UTF-8" ?>
<chapter xml:id="sets" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Quick Guide to SageMath</title>


    <introduction>

        <p>Sage is a powerful OpenSource system with the goal of being a viable alternative to Magma, Mathematica, Maple, and Matlab.
            In this initial chapter we will consider how to get up and running with SageMath.
        </p>

        <p>
            There are several approaches to using Sage Math:
        </p>

        <ul>
            <li>
                <p>Using SageMath online.</p>
            </li>
            <li>
                <p>Downloading the source and running locally.</p>
            </li>
            <li>
                <p>using SageMath Cells embedded in your own web documents</p>
            </li>
            <li>
                <p>Installing Android or iOS Apps on your phone or tablet.</p>
            </li>
        </ul>

        <p>We will now look at some of these methods.</p>

        <p>
            It would be pointless here to try and replicate the extensive guides and tutorials from the <url href="http://www.sagemath.org/help.html">SageMath Help</url> site.
            My aim here is rather limited. It is to provide a dumping ground an practice area for things I have encountered whilst working my way through several
            on line training courses. It also enables me to practice using <url href="https://mathbook.pugetsound.edu/">Mathbook XML</url>.
        </p>

    </introduction>

    <section xml:id="section-note-on-proofs">
        <title>SageMath Online</title>

        <p>
            Probably the easiest way to familiarise yourself with SageMath is to use the Sage Math Cloud Server.
            From the main <url href="http://www.sagemath.org">SageMath</url> page select the
            <url href="https://cloud.sagemath.com/projects">Sage Online</url>
            link. You will
            have to set up an account but these are free for basic usage.
        </p>

        <p>Once you have set up an account you can then create a project and a SageMath Worksheet.
            There are full instructions here <url href="http://doc.sagemath.org/html/en/prep/Logging-On.html">Logging On</url>.
        </p>

        <figure>
            <image source="images/sageCloudSession.png"/>
            <caption>A Typical Sage Cloud Session</caption>
        </figure>

        <p>
            Notice the line <c>%typeset_mode True</c> just before the <c>coeff.column_space()</c> command.
            As you can see from the output below this line, this has the effect of displaying results in a much prettier (typeset) format.
        </p>

    </section>

    <section>
        <title>Running From Source</title>

        <p>The SageMath source is hosted on here <url href="https://git.sagemath.org/sage.git/">SageMath GitHub</url>.
            To download and build the source you will need the appropriate development environment set up. This is not detailed here
            and assumes some familiarity with git and make. Full details can be found <url href="http://doc.sagemath.org/html/en/installation/source.html">here</url>.
            At a minimum you will need a POSIX compliant shell with GCC, make, perl, and python.
        </p>

        <subsection>
            <title>Building SageMath</title>
            <p>Once you have a build environment setup then grab the source from the git repository. This may take a few minutes depending on your network speed.</p>

            <console>
                <prompt>--- ~/dev »</prompt>
                <input>git clone git://github.com/sagemath/sage.git</input>
                <output>
                    Cloning into 'sage'...
                    remote: Counting objects: 448266, done.
                    remote: Compressing objects: 100% (268/268), done.
                    remote: Total 448266 (delta 157), reused 0 (delta 0), pack-reused 447997
                    Receiving objects: 100% (448266/448266), 152.82 MiB | 11.21 MiB/s, done.
                    Resolving deltas: 100% (341065/341065), done.
                </output>
                <prompt>--- ~/dev »</prompt>
                <input>cd sage</input>
                <prompt>--- dev/sage ‹master› »</prompt>
                <input>git checkout develop</input>
                <output>
                    Branch develop set up to track remote branch develop from origin.
                    Switched to a new branch 'develop'
                </output>
                <prompt>--- dev/sage ‹develop› »</prompt>
                <input>make</input>
                <output>
                    make build/make/Makefile
                    make[1]: Entering directory `/home/dev/sage'
                    make[1]: `build/make/Makefile' is up to date.
                    make[1]: Leaving directory `/home/dev/sage'
                    build/bin/sage-logger \
                    "cd build/make &amp;&amp; ./install 'all'" logs/install.log
                    *** ALL ENVIRONMENT VARIABLES BEFORE BUILD: ***
                    ...
                    &lt;and so on, and so forth, for quite some time ...&gt;
                    ...
                    Testing that Sage starts...
                    [2016-12-01 14:31:59] SageMath version 7.5.beta4, Release Date: 2016-11-24
                    Forcing sage-location, probably because a new package was installed.
                    Updating various hardcoded paths...
                    (Please wait at most a few minutes.)
                    DO NOT INTERRUPT THIS.
                    Done updating paths.
                    Yes, Sage starts.
                    make[2]: Leaving directory `/home/dev/sage/build/make'
                    make[1]: Leaving directory `/home/dev/sage/build/make'

                    real 29m58.528s
                    user 32m33.566s
                    sys 7m0.240s
                    Sage build/upgrade complete!

                    To install small scripts to directly run Sage's versions of GAP,
                    the PARI/GP interpreter, Maxima, or Singular etc. (by typing e.g.
                    just 'gap' or 'gp') into a standard 'bin' directory, start Sage
                    by typing 'sage' (or './sage') and enter something like

                    install_scripts('/usr/local/bin')

                    at the Sage command prompt ('sage:').

                </output>
                <prompt>--- dev/sage ‹develop› »</prompt>
            </console>
            <p/>
        </subsection>

        <subsection>
            <title>Running SageMath Notebook from the command line</title>
            <console>
                <prompt>--- ~/dev »</prompt>
                <input>./sage --notebook</input>
            </console>
            <figure>
                <image source="images/sageNotebookStart.png"/>
                <caption>Starting sage notebook from the command line.</caption>
            </figure>
            <figure>
                <image source="images/sageNotebookSession.png"/>
                <caption>The Notebook session at localhost:8080.</caption>
            </figure>
            <p>
                You can now start using this local session equivalently to SageMathCloud sessions with the
                benefit of gaining the full resources of your local machine and being able to work offline.
            </p>
        </subsection>

        <subsection>
            <title>Running SageMath From the command line</title>

            <p>You can also run SageMath directly from the command line.  You may want to do this for quick tests or as part of your development cycle.</p>

            <figure>
                <image source="images/sageCommandLineSession.png"/>
                <caption>A sample sage command line session.</caption>
            </figure>

        </subsection>

<example>
  <title>Determine
    <m>y</m>-Intercepts: Set
    <m>x=0</m>
  </title>
  <p>Determine the
    <m>y</m>-intercept of
    <m>y=3x+2</m>.
  </p>
  <p>******First style table*****</p>
  <md>
    <mrow>\text{
          \(y = 3x+2\)} \amp\amp\amp \text{
          \(y\)-intercepts have an
          \(x\)-coordinate of
          \(0\): set
          \(x=0\)}</mrow>
    <mrow>\text{
          \(y = 3(0)+2\)} \amp\amp\amp \text{Solve for
          \(y\): Multiply
          \(3(0)\) first}</mrow>
    <mrow>\text{
          \(y=0+2\)} \amp\amp\amp \text{Add}</mrow>
    <mrow>\text{
          \(y=2\)} \amp\amp\amp \text{We have found the
          \(y\)-value of the
          \(y\)-intercept}</mrow>
    <mrow>\text{
          \((0,2)\)} \amp\amp\amp \text{Our Solution
      <m>\checkmark</m>}
    </mrow>
  </md>
  <p>******Second style table*****</p>
  <table>
      <tabular>
        <col halign="right" />
        <col />
    <!--  -->
      <row>
        <cell><m>y=3x+2</m></cell>
        <cell><m>y</m>-intercepts have an
      <m>x</m>-coordinate of
      <m>0</m>: set
      <m>x=0</m></cell>
      </row>
      <row>
        <cell><m>y=3(0)+2</m></cell>
        <cell>Solve for
      <m>y</m>: Multiply
      <m>3(0)</m> first</cell>
      </row>
      <row>
        <cell><m>y=0+2</m></cell>
        <cell>Add</cell>
      </row>
      <row>
        <cell>
          <m>y=2</m>
        </cell>
        <cell>We have found the
          <m>y</m>-value of the
          <m>y</m>-intercept.
        </cell>
      </row>
      <row>
        <cell><m>(0,2)</m></cell>
        <cell>Our Solution <m>\checkmark</m></cell>
      </row>
    </tabular>
  </table>
  <sidebyside widths="40% 55%" valign="middle">
    <p>The
      <m>y</m>-intercept <m>(0,2)</m> is labeled on the graph of the equation.
    </p>
    <figure xml:id="figure-determine-y-intercept">
      <image xml:id="determine-y-intercept">
        <latex-image-code><![CDATA[\begin{tikzpicture} \draw[step=1cm,gray,very thin] (-5.9,-5.9) grid (5.9,5.9); \draw[line width=0.55mm,black,
          <->] (-6,0) -- (6,0) node[anchor=north west] {$x$-axis}; \draw[line width=0.55mm,black,
            <->] (0,-6) -- (0,6) node[anchor=south east] {$y$-axis}; \foreach \x in {-4,-2,2,4} \draw[line width=0.55mm,black] (\x cm,3pt) -- (\x cm,-3pt) node[shift={(0.05,-.3)}] {$\x$}; \foreach \y in {-4,-2,2,4} \draw[line width=0.55mm,black] (3pt,\y cm) -- (-3pt,\y cm) node[shift={(-.3,0.05)}] {$\y$}; \fill[color=black] (0,2) circle (.15cm) node[shift={(1,-.3)}] {\LARGE $(0,2)$}; \draw[line width=0.65mm,black,
              <->] (-2,-4) -- (1,5) node[shift={(-3,-1.75)}] {\LARGE $y=3x+2$}; \end{tikzpicture}} ]]></latex-image-code>
            </image>
          </figure>
        </sidebyside>
  </example>
    </section>

    <section>
        <title>Executing Sage Commands</title>

        <p>Most of your interaction will be by typing commands into a <em>compute cell</em>. If you are reading this in the Sage Notebook or as a webpage version of the book, then you will see a compute cell just below this paragraph. Click once inside the compute cell and if you are in the Sage Notebook, you will get a more distinctive border around it, a blinking cursor inside, plus a cute little <q>evaluate</q> link below.
        </p>

        <sage/>

        <p>At the cursor, type <c>2+2</c> and then click on the evaluate link. Did a <c>4</c> appear below the cell? If so, you have successfully sent a command off for Sage to evaluate and you have received back the (correct) answer.
        </p>

        <p>Here is another compute cell. Try evaluating the command <c>factorial(300)</c> here.
        </p>

        <sage/>

        <p>Hmmmmm. That is quite a big integer! If you see slashes at the end of each line, this means the result is continued onto the next line, since there are 615 total digits in the result.</p>

        <p>To make new compute cells in the Sage Notebook (only), hover your mouse just above another compute cell, or just below some output from a compute cell. When you see a skinny blue bar across the width of your worksheet, click and you will open up a new compute cell, ready for input. Note that your worksheet will remember any calculations you make, in the order you make them, no matter where you put the cells, so it is best to stay organized and add new cells at the bottom.</p>

        <p>Try placing your cursor just below the monstrous value of <m>300!</m> that you have. Click on the blue bar and try another factorial computation in the new compute cell.
        </p>

        <p>Each compute cell will show output due to only the very last command in the cell. Try to predict the following output before evaluating the cell.</p>

        <!-- Doctest framework *will* create output from "b", contrary to notebook behavior -->
        <!-- So doctest will fail, and doctest="not tested" does not help the situation -->
        <sage>
            <input>
                a = 10
                b = 6
                b = b - 10
                a = a + 20
                a
            </input>
            <output>30</output>
        </sage>

        <p>The following compute cell will not print anything since the one command does not create output. But it will have an effect, as you can see when you execute the subsequent cell. Notice how this uses the value of <c>b</c> from above. Execute this compute cell <em>once</em>. Exactly once. Even if it <em>appears</em> to do nothing. If you execute the cell twice, your credit card may be charged twice.
        </p>

        <sage>
            <input>b = b + 50</input>
        </sage>

        <p>Now execute this cell, which will produce some output.</p>

        <sage>
            <input>b + 20</input>
            <output>66</output>
        </sage>

        <p>So <c>b</c> came into existence as <c>6</c>. We subtracted <m>10</m> immediately afterward. Then a subsequent cell added <c>50</c>. This assumes you executed this cell <em>exactly</em> once! In the last cell we create <c>b+20</c> (but do not save it) and it is this value (<m>66</m>) that is output, while <c>b</c> is still <m>46</m>.
        </p>

        <p>You can combine several commands on one line with a semi-colon. This is a great way to get multiple outputs from a compute cell. The syntax for building a matrix should be somewhat obvious when you see the output, but if not, it is not particularly important to understand now.</p>

        <sage>
            <input>A = matrix([[3, 1], [5,2]]); A</input>
            <output>
                [3 1]
                [5 2]
            </output>
        </sage>

        <sage>
            <input>print A; print ; A.inverse()</input>
            <output><![CDATA[
            [3 1]
            [5 2]
            <BLANKLINE>
            [ 2 -1]
            [-5  3]]]>
            </output>
        </sage>
        <subsection>
            <title>Immediate Help</title>

            <p>Some commands in Sage are <q>functions,</q> an example is <c>factorial()</c> above. Other commands are <q>methods</q> of an object and are like characteristics of objects, an example is <c>.inverse()</c> as a method of a matrix. Once you know how to create an object (such as a matrix), then it is easy to see all the available methods. Write the name of the object, place a period (<q>dot</q>) and hit the TAB key. If you have <c>A</c> defined from above, then the compute cell below is ready to go, click into it and then hit TAB (not <q>evaluate</q>!). You should get a long list of
                possible methods.
            </p>

            <sage doctest="not tested">
                <input>A.</input>
            </sage>

            <p>To get some help on how to use a method with an object, write its name after a dot (with no parentheses) and then use a question-mark and hit TAB. (Hit the escape key <q>ESC</q> to remove the list, or click on the text for a method.)
            </p>

            <sage doctest="not tested">
                <input>A.inverse?</input>
            </sage>

            <p>With one more question-mark and a TAB you can see the actual computer instructions that were programmed into Sage to make the method work, once you scoll down past the documentation delimited by the triple quotes (<c>"""</c>):
            </p>

            <sage doctest="not tested">
                <input>A.inverse??</input>
            </sage>

            <p>It is worthwhile to see what Sage does when there is an error. You will probably see a lot of these at first, and initially they will be a bit intimidating. But with time, you will learn how to use them effectively and you will also become more proficient with Sage and see them less often. Execute the compute cell below, it asks for the inverse of a matrix that has no inverse. Then reread the commentary.</p>

            <sage>
                <input>
                    B = matrix([[2, 20], [5, 50]])
                    B.inverse()
                </input>
                <output>
                    Traceback (most recent call last):
                    ...
                    ZeroDivisionError: Matrix is singular
                </output>
            </sage>

            <p>Click just to the left of the error message to expand it fully (another click hides it totally, and a third click brings back the abbreviated form). Read the bottom of an error message first, it is your best explanation. Here a <c>ZeroDivisionError</c> is not 100
                <percent/>
                accurate, but is close. The matrix is not invertible, not dissimilar to how we cannot divide scalars by zero. The remainder of the message begins at the top showing were the error first happened in your code and then the various places where intermediate functions were called, until the actual piece of Sage where the problem occurred. Sometimes this information will give you some clues, sometimes it is totally undecipherable. So do not let it scare you if it seems mysterious, but do remember to always read the last line first, then go back and read the first few lines for
                something that looks like your code.
            </p>

        </subsection>
    </section>

    <xi:include href="./sage/sets-sage.xml"/>

</chapter>
