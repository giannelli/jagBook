<?xml version="1.0" encoding="UTF-8" ?>
<chapter xml:id="sets" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Quick Guide to SageMath</title>

    <introduction>

        <p>Sage is a powerful OpenSource system with the goal of being a viable alternative to Magma, Mathematica, Maple, and Matlab.
            In this initial chapter we will consider how to get up and running with SageMath.
        </p>

        <p>
            There are several approaches to using Sage Math:
        </p>

        <ul>
            <li>
                <p>Using SageMath online.</p>
            </li>
            <li>
                <p>Downloading the source and running locally.</p>
            </li>
            <li>
                <p>using SageMath Cells embedded in your own web documents</p>
            </li>
            <li>
                <p>Installing Android or iOS Apps on your phone or tablet.</p>
            </li>
        </ul>

        <p>We will now look at some of these methods.</p>

        <p>
            It would be pointless here to try and replicate the extensive guides and tutorials from the <url href="http://www.sagemath.org/help.html">SageMath Help</url> site.
            My aim here is rather limited. It is to provide a dumping ground an practice area for things I have encountered whilst working my way through several
            on line training courses. It also enables me to practice using <url href="https://mathbook.pugetsound.edu/">Mathbook XML</url>.
        </p>

    </introduction>

    <section xml:id="sage-online">
        <title>SageMath Online</title>

        <p>
            Probably the easiest way to familiarise yourself with SageMath is to use the Sage Math Cloud Server.
            From the main <url href="http://www.sagemath.org">SageMath</url> page select the
            <url href="https://cloud.sagemath.com/projects">Sage Online</url>
            link. You will
            have to set up an account but these are free for basic usage.
        </p>

        <p>Once you have set up an account you can then create a project and a SageMath Worksheet.
            There are full instructions here <url href="http://doc.sagemath.org/html/en/prep/Logging-On.html">Logging On</url>.
        </p>

        <figure>
            <image source="images/sageCloudSession.png"/>
            <caption>A Typical Sage Cloud Session</caption>
        </figure>

        <p>
            Notice the line <c>%typeset_mode True</c> just before the <c>coeff.column_space()</c> command.
            As you can see from the output below this line, this has the effect of displaying results in a much prettier (typeset) format.
        </p>

    </section>

    <section>
        <title>Running From Source</title>

        <p>The SageMath source is hosted here <url href="https://git.sagemath.org/sage.git/">SageMath GitHub</url>.
            To download and build the source you will need the appropriate development environment set up. This is not detailed here
            and assumes some familiarity with git and make. Full details can be found <url href="http://doc.sagemath.org/html/en/installation/source.html">here</url>.
            At a minimum you will need a POSIX compliant shell with GCC, make, perl, and python.
        </p>

        <subsection>
            <title>Building SageMath</title>
            <p>Once you have a build environment setup then grab the source from the git repository. This may take a few minutes depending on your network speed.</p>

            <console>
                <prompt>--- ~/dev »</prompt>
                <input>git clone git://github.com/sagemath/sage.git</input>
                <output>
                    Cloning into 'sage'...
                    remote: Counting objects: 448266, done.
                    remote: Compressing objects: 100% (268/268), done.
                    remote: Total 448266 (delta 157), reused 0 (delta 0), pack-reused 447997
                    Receiving objects: 100% (448266/448266), 152.82 MiB | 11.21 MiB/s, done.
                    Resolving deltas: 100% (341065/341065), done.
                </output>
                <prompt>--- ~/dev »</prompt>
                <input>cd sage</input>
                <prompt>--- dev/sage ‹master› »</prompt>
                <input>git checkout develop</input>
                <output>
                    Branch develop set up to track remote branch develop from origin.
                    Switched to a new branch 'develop'
                </output>
                <prompt>--- dev/sage ‹develop› »</prompt>
                <input>make</input>
                <output>
                    make build/make/Makefile
                    make[1]: Entering directory `/home/dev/sage'
                    make[1]: `build/make/Makefile' is up to date.
                    make[1]: Leaving directory `/home/dev/sage'
                    build/bin/sage-logger \
                    "cd build/make &amp;&amp; ./install 'all'" logs/install.log
                    *** ALL ENVIRONMENT VARIABLES BEFORE BUILD: ***
                    ...
                    &lt;and so on, and so forth, for quite some time ...&gt;
                    ...
                    Testing that Sage starts...
                    [2016-12-01 14:31:59] SageMath version 7.5.beta4, Release Date: 2016-11-24
                    Forcing Sage-location, probably because a new package was installed.
                    Updating various hardcoded paths...
                    (Please wait at most a few minutes.)
                    DO NOT INTERRUPT THIS.
                    Done updating paths.
                    Yes, Sage starts.
                    make[2]: Leaving directory `/home/dev/sage/build/make'
                    make[1]: Leaving directory `/home/dev/sage/build/make'

                    real 29m58.528s
                    user 32m33.566s
                    sys 7m0.240s
                    Sage build/upgrade complete!

                    To install small scripts to directly run Sage's versions of GAP,
                    the PARI/GP interpreter, Maxima, or Singular etc. (by typing e.g.
                    just 'gap' or 'gp') into a standard 'bin' directory, start Sage
                    by typing 'sage' (or './sage') and enter something like

                    install_scripts('/usr/local/bin')

                    at the Sage command prompt ('sage:').

                </output>
                <prompt>--- dev/sage ‹develop› »</prompt>
            </console>
            <p/>
        </subsection>

        <subsection>
            <title>Running SageMath Notebook from the command line</title>
            <console>
                <prompt>--- ~/dev »</prompt>
                <input>./sage --notebook</input>
            </console>
            <figure>
                <image source="images/sageNotebookStart.png"/>
                <caption>Starting Sage notebook from the command line.</caption>
            </figure>
            <figure>
                <image source="images/sageNotebookSession.png"/>
                <caption>The Notebook session at localhost:8080.</caption>
            </figure>
            <p>
                You can now start using this local session equivalently to SageMathCloud sessions with the
                benefit of gaining the full resources of your local machine and being able to work offline.
            </p>
        </subsection>

        <subsection>
            <title>Running SageMath From the command line</title>

            <p>You can also run SageMath directly from the command line.  You may want to do this for quick tests or as part of your development cycle.</p>

            <figure>
                <image source="images/sageCommandLineSession.png"/>
                <caption>A sample Sage command line session.</caption>
            </figure>

        </subsection>

    </section>

</chapter>
