<?xml version="1.0" encoding="UTF-8" ?>
<chapter xml:id="integers" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Calculus</title>

    <introduction>
        <p>SageMath has excellent functionality for Calculus.  We will cover some of the basics here to give you some indication of what is possible.</p>
    </introduction>

    <section xml:id="calculus-limits">
        <title>Calculating Limits</title>

        <p>The concept of the limit is often used to define the integral and the derivative of functions.</p>

        <p>Here is an easy example to demonstrate Sage syntax for limits:</p>
        <sage>
            <input>
                var('x')

                f(x) = 1 / x
                show("Limit of 1/x as x->0+: {0}".format(limit(f, x=0,dir='plus')))
                show("Limit of 1/x as x->0-: {0}".format(limit(f, x=0,dir='minus')))
                p1 = plot(f, (x, -1, 1), detect_poles='show')
                p1.axes_range(-1, 1, -10, 10)
                p1.show()
            </input>
        </sage>


        <p>The following examples are taken from <xref ref="james_stewart">Essential Calculus - James Stewart</xref>.</p>

        <p>See also the <xref ref="sage_tutorial_limits">Sage Tutorial on Limits</xref>.</p>

        <p>The examples here (and some more can all been found in this (public) <url href="https://cloud.sagemath.com/projects/aab56d83-dc7e-435a-9c97-f420f3cfc10b/files/Calculus_Limits.sagews">Cloud SageMath Worksheet</url> </p>

        <p>Example 2, page 26</p>
        <sage>
            <input>
                f2 = (x-1)/(x^2-1)
                show(f2)
                f2.limit(x=1)
            </input>
            <output>1/2</output>
        </sage>

        <p>Plotting this function will give us a better picture of what is happening:</p>
        <sage>
            <input>
                pt = point((1, 1/2), rgbcolor='white', pointsize=30, faceted=True)
                p=plot(f2, -2,2, ymin=-5,ymax=5, exclude=[-1])
                p+pt
            </input>

        </sage>

        <figure>
            <image source="images/limits_ex2.png"/>
            <caption>Example 2, page 26</caption>
        </figure>

        <p><index><main>Sage Worked Examples</main><sub>Stewart : Section 1.3, Exercise 12, page 33</sub></index>
            Stewart : Section 1.3, Exercise 12, page 33
        </p>
        <sage>
            <input>
                ex12=(x^2 - 2*x)/(x^2 - x - 2)
                show(ex12)
                #The show() method is not required in a sagemath worksheet
                #- but is needed here to display multiple lines in the output?
                show(ex12(x=0))
                show(ex12(x=-0.5))
                show(ex12(x=-0.9))
                show(ex12(x=-0.95))
                show(ex12(x=-0.99))
                show(ex12(x=-0.999))
                show(ex12.limit(x=-1))
                show(ex12(x=-2.0))
                show(ex12(x=-1.5))
                show(ex12(x=-1.1))
                show(ex12(x=-1.01))
                show(ex12(x=-1.001))
                show(ex12(x=-1.0001))
                show(ex12.limit(x=-1))
            </input>
        </sage>

        <p>From a plot or simplification of the equation you can visually see that there is an explosion at <m>-1</m>.</p>
        <sage>
            <input>
                #show() is not needed if doing this on a SageMath worksheet
                show(plot(ex12, -2,2, exclude=[-1], ymin=-10, ymax=10, detect_poles='show'))
                show(ex12.simplify_full())
            </input>
            <output>\frac{x}{x + 1}</output>
        </sage>

        <p>
            Note that we have used an exclude list (square brackets is a list) with one entry, namely <m>-1</m>.
            See what happens if you take this out. Also note that we have explicitly determined the upper and lower <m>y</m> values.
            Again, experiment by taking these away or changing them.
        </p>

        <p><index><main>Sage Worked Examples</main><sub>Stewart : Section 1.4, Exercise 14, page 44</sub></index>
            Stewart : Section 1.4, Exercise 14, page 44
        </p>
        <sage>
            <input>
                y_limit=var('y_limit')
                f=(x^2-4*x)/(x^2-3*x-4)
                y_limit=f.limit(x=4)
                show(f,"->",y_limit)
                p1=(0,y_limit)
                p2=(4,y_limit)
                p3=(4,0)
                pt1 = point(p1, rgbcolor='white', faceted=True, pointsize=30)
                pt2 = point(p2, rgbcolor='black', pointsize=30)
                l1 = line([p1, p2], linestyle='--')
                l2 = line([p2, p3], linestyle='--')
                pt1+pt2+l1+l2+plot(f, (x,0,5))
            </input>
        </sage>


    </section>

    <section xml:id="calculus-derivatives">
        <title>Derivatives</title>

        <p>Here are some basic examples to give a quick overview (without explanation) of how SageMath can be helpful
            for calculating derivatives:</p>
        <sage>
            <input>
                var('x, y')
                f(x, y) = 4 * x^5 * y^3 + 7 * y * x^2 - 6 * x + 2 * y
                show("f(x,y):",f)

                dfdx(x, y) = f.diff(x)
                show("df/dx:",dfdx)
                dfdy(x, y) = diff(f, y)
                show("df/dy:",dfdy)


                d2fdx2(x, y) = derivative(f, x, 2)    # Alias for diff
                show("Second x derivative :",d2fdx2)

                # Trigonometric functions
                g(x) = sqrt(x^3 + csc(x))
                show("g(x):",g)
                dgdx(x) = g.diff(x)
                show("dg/dx:",dgdx)

                # Implicit differentiation
                # The next line tells Sage that y is a function of x
                y(x) = function('y')(x)
                expr = 4 * y^2 + sin(y) == x^2

                show("Expression:",expr)

                # take the derivative and solve for dy/dx
                dydx = solve(diff(expr), diff(y))
                show(dydx[0])
            </input>
        </sage>

        <p>The following examples are taken from <xref ref="james_stewart">Essential Calculus - James Stewart, Chapter 2</xref>.</p>

        <p>All the examples,and more, can been found in this (public)
            <url href="https://cloud.sagemath.com/projects/aab56d83-dc7e-435a-9c97-f420f3cfc10b/files/Calculus_Derivatives.sagews">
                Cloud SageMath Worksheet</url>.</p>
        <p>Some of the examples from that worksheet are recreated here.</p>

        <subsection>
            <title>Examples From Chapter 2</title>

            <subsubsection>
                <title>Section 2.1</title>
                <p><index><main>Sage Worked Examples</main><sub>Stewart : Section  2.1, Exercise 25 - 30, Page 82</sub></index>
                    Section 2.1, Exercise 25 - 30, Page 82
                </p>
                <sage>
                    <input>
                        t=var('t')
                        f=3*x^2-4*x+1
                        show("f(t) = ", f, ", f'(t) = ", f.diff())

                        f=2*t^3+t
                        show("f(t) = ", f, ", f'(t) = ", f.diff())

                        f=(2*t+1)/(t+3)
                        show("f(t) = ", f, ", f'(t) = ", f.diff().simplify_full())

                        f=1/x^2
                        show("f(t) = ", f, ", f'(t) = ", f.diff())

                        f=sqrt(1-2*x)
                        show("f(t) = ", f, ", f'(t) = ", f.diff())

                        f=4/sqrt(1-x)
                        show("f(t) = ", f, ", f'(t) = ", f.diff())
                    </input>
                </sage>

                <p><index><main>Sage Worked Examples</main><sub>Stewart : Section  2.1, Exercise 34, Page 82</sub></index>
                    Section 2.1, Exercise 34, Page 82
                </p>

                <sage>
                    <input>
                        f(x)=(tan(x)-1)/(x - pi/4)
                        f.show()  #Strange format but the displayed equation is correct!
                        limit=f.limit(x=pi/4);limit.show()
                        F=f.plot(0,pi,ymin=-5,ymax=5,exclude=[pi/2])

                        p1=(0,limit.n())
                        p2=(pi/4,limit.n())
                        p3=(pi/4,0)
                        pt1 = point(p1, rgbcolor='white', faceted=True, pointsize=30)
                        pt2 = point(p2, rgbcolor='black', pointsize=30)
                        pt3 = point(p3, rgbcolor='black', pointsize=30)
                        l1 = line([p1, p2], linestyle='--')
                        l2 = line([p2, p3], linestyle='--')

                        plt=F+pt2+l1+l2
                        plt.axes_labels([r'$x$',r'$\frac{\tan x - 1}{x - \pi/4}$'])
                        show(plt)
                    </input>
                </sage>

                <p><index><main>Sage Worked Examples</main><sub>Stewart : Section  2.1, Exercise 49, Page 83</sub></index>
                    Section 2.1, Exercise 49, Page 83
                </p>
                <sage>
                    <input>
                        f(x)=x*sin(1/x)
                        Df=f.diff().simplify_full()

                        show("f(t) = ", f, ", f'(t) = ",Df)
                        show(Df.limit(x=0), " = undefined")

                        pltLargeScale=f.plot(-pi,pi)+Df.plot(-pi,pi,color='red',ymin=-2,ymax=2,detect_poles='show')
                        pltSmallScale=f.plot(-pi/10,pi/10)+Df.plot(-pi/10,pi/10,color='red',ymin=-1,ymax=1,detect_poles='show')
                        show(pltLargeScale)
                        show(pltSmallScale)
                    </input>
                </sage>
                <p><index><main>Sage Worked Examples</main><sub>Stewart : Section  2.1, Exercise 50, Page 83</sub></index>
                    Section 2.1, Exercise 50, Page 83
                </p>
                <sage>
                    <input>
                        f(x)=x^2*sin(1/x)
                        Df=f.diff().simplify_full()

                        show("f(t) = ", f, ", f'(t) = ",Df)
                        show(Df.limit(x=0),  " = indeterminate")

                        pltLargeScale=f.plot(-pi,pi)+Df.plot(-pi,pi,color='red',ymin=-2,ymax=2,detect_poles='show')
                        pltSmallScale=f.plot(-pi/10,pi/10)+Df.plot(-pi/10,pi/10,color='red',ymin=-1,ymax=1,detect_poles='show')
                        show(pltLargeScale)
                        show(pltSmallScale)
                    </input>
                </sage>
            </subsubsection>

            <subsubsection>
                <title>Section 2.2</title>
                <p><index><main>Sage Worked Examples</main><sub>Stewart : Section  2.2, Exercise 44, Page 94</sub></index>
                    Section 2.2, Exercise 44, Page 94
                </p>
                <sage>
                    <input>
                        f=2*x^2-x^3
                        f1=f.diff()
                        f2=f1.diff()
                        f3=f2.diff()
                        f4=f3.diff()
                        show("f = ",f)
                        show("First Derivative = ",f1)
                        show("Second Derivative = ", f2)
                        show("Third Derivative = ", f3)
                        show("Fourth Derivative = ", f4)

                        p=plot(f, (x,-5,5), ymin=-8,ymax=5,color='blue')
                        p += plot(f1, (x,-5,5),color='green')
                        p += plot(f2, (x,-5,5),color='purple')
                        p += plot(f3, (x,-5,5),color='red')
                        p += plot(f4, (x,-5,5),color='orange',linestyle='--')
                        p
                    </input>
                </sage>
            </subsubsection>

            <subsubsection>
                <title>Section 2.3</title>
                <p><index><main>Sage Worked Examples</main><sub>Stewart : Section  2.3, Exercises 29, Page 105</sub></index>
                    Section 2.3, Exercises 29, Page 105
                </p>
                <sage>
                    <input>
                        f(x)=3*x^2-x^3
                        Df=f.diff()
                        show(f,Df)
                        m,c=var('m c')
                        pt1=(1,2)
                        m=Df(x=1)
                        #y=m*x+c => c=y-mx at (1,2)
                        c=pt1[1]-m*pt1[0]  # pt1[0] is first element of (1,2) tuple = 1, pt2[1] = 2
                        y(x)=m*x+c

                        Plot=point(pt1,rgbcolor='black', pointsize=30)+plot(f,-1,3)+plot(y,-1,3,color='red')
                        Plot.show(ymax=6,ymin=-2)
                    </input>
                </sage>

                <p><index><main>Sage Worked Examples</main><sub>Stewart : Section  2.3, Exercises 30, Page 105</sub></index>
                    Section 2.3, Exercises 30, Page 105
                </p>

                <sage>
                    <input>
                        g(x)=x-sqrt(x)
                        Dg=g.diff()
                        show(g,Dg)
                        m,c=var('m c')
                        pt1=(1,0)
                        m=Dg(x=1)
                        #y=m*x+c => c=y-mx at (1,0)
                        c=pt1[1]-m*pt1[0]  # pt1[0] is first element of (1,0) tuple = 1, pt2[1] = 0
                        y(x)=m*x+c
                        point(pt1,rgbcolor='black', pointsize=30)+plot(g,0,3)+plot(y,0,3,color='red')
                    </input>
                </sage>
            </subsubsection>

            <subsubsection>
                <title>Section 2.4</title>
                <p><index><main>Sage Worked Examples</main><sub>Stewart : Section  2.4, Exercises 27, Page 112</sub></index>
                    Section 2.4, Exercises 27, Page 112
                </p>

                <sage>
                    <input>
                        y(x)=(x^2-1)/(x^2+x+1)
                        y.show()
                        dydx=y.diff(x).simplify_full()

                        m,c=var('m c')
                        pt1=(1,0)
                        m=dydx(x=1)
                        #y=m*x+c => c=y-mx at (1,0)
                        c=pt1[1]-m*pt1[0]  # pt1[0] is first element of (1,0) tuple = 1, pt2[1] = 0
                        y_line(x)=m*x+c
                        point(pt1,rgbcolor='black', pointsize=30)+plot(y,-3,3)+plot(y_line,-3,3,color='red')+plot(dydx,-3,3, color='green')
                    </input>
                </sage>

                <p>
                    We have performed the same action - plot a graph and its tangent line - several times now. Time to encapsulate it in our own function!
                    Run the next sage cell example to define the function <em>plot_tangentline</em>.
                </p>
                <p>
                    This is a Python function that takes three arguments:
                    <ol>
                        <li><m>f</m> the function we want to plot.</li>
                        <li><m>pt</m> the point on the function for which we want to draw the tangent line.</li>
                        <li><m>xrange</m> the range of x coordinates that we want the graph to span.</li>
                    </ol>
                </p>

                <p>
                    Running the next sage cell will not produce any visible results but will just stores this
                    user defined method in memory for use in other cells.
                    The next few examples make use of this <em>user defined function</em>
                    to save a bit of typing.
                </p>

                <p>Remember to run this before running any other Sage Cell that makes use of it.</p>

                <definition xml:id="plot_tangentline">
                    <index><main>User Defined Functions</main><sub>plot_tangentline</sub></index>
                    <title>Utility method <c>plot_tangentline()</c></title>
                    <sage>
                        <input>
                            def plot_tangentline(f, pt, xrange ):
                                (a,b) = pt
                                dydx=f.diff(x)
                                m=dydx(x=a)
                                c=b-m*a
                                dydx=f.diff(x)
                                y(x)=m*x+c
                                tangent="y={}".format(y(x))
                                return point(pt,rgbcolor='black', pointsize=30) \
                                    +plot(f,xrange,legend_label='f(x)',detect_poles='show') \
                                    +plot(dydx,xrange, color='green',legend_label='f\'(x)',linestyle='--',detect_poles='show') \
                                    +plot(y,xrange,color='red',legend_label=tangent)
                        </input>
                    </sage>
                </definition>

                <p>Redo the previous example using our method:</p>
                <sage>
                    <input>
                        plot_tangentline(f=(x^2-1)/(x^2+x+1), pt=(1,0), xrange=(x,-3,3))
                    </input>
                </sage>

                <p>Now wasn't that a lot easier!  No for the rest.</p>
                <p><index><main>Sage Worked Examples</main><sub>Stewart : Section  2.4, Exercises 28 - 31, Page 112</sub></index>
                    Section 2.4, Exercises 28 - 31, Page 112
                </p>
                <sage>
                    <input>
                        f28=sqrt(x)/(x+1)
                        show(f28)
                        plot_tangentline(f28, pt=(4,0.4), xrange=(x,0,5)).show(ymax=1)

                        f29=cos(x)-sin(x)
                        show(f29)
                        plot_tangentline(f29, pt=(pi,-1), xrange=(x,-2*pi,2*pi)).show(ymin=-5)

                        f30=x-tan(x)
                        show(f30)
                        plot_tangentline(f30, pt=(pi,pi), xrange=(x,0,2*pi)).show(ymin=-5,ymax=5)

                        f31=1/(1+x^2)
                        show(f31)
                        plot_tangentline(f31, pt=(-1,1/2), xrange=(x,-5,5)).show(ymin=-1,ymax=2)
                    </input>
                </sage>

                <p><index><main>Sage Worked Examples</main><sub>Stewart : Section  2.4, Exercise 36, Page 113</sub></index>
                    Section 2.4, Exercise 36, Page 113, Nth Derivative of a function
                </p>

                <p>The second argument to the diff method is the derivative order: 1 for 1st derivative, 2 for second derivative, etc.</p>
                <sage>
                    <input>
                        f=x*sin(x)
                        f.show()
                        f.diff(x,1).show()
                        f.diff(x,2).show()
                        f.diff(x,3).show()
                        f.diff(x,10).show()
                        f.diff(x,34).show()
                        f.diff(x,35).show()
                        f.diff(x,36).show()
                    </input>
                </sage>

                <p><index><main>Sage Worked Examples</main><sub>Stewart : Section  2.4, Exercise 52, Page 114</sub></index>
                    Section 2.4, Exercise 52, Page 114
                </p>

                <p>
                    This demonstrates the use of some predefined names: <em>omega</em> and <em>mu</em>. These will get formatted to
                    <m>\omega</m> and <m>\mu</m> when you use <em>show()</em>.  Find out about <em>LaTex</em> to see what the other possibilities
                    are, for example, <em>xi</em> for <m>\xi</m> and <em>Xi</em> for uppercase <m>\Xi</m>, and so on.
                </p>
                <sage>
                    <input>
                        theta, mu, W = var('theta, mu, W')
                        F(theta)= mu*W/(mu*sin(theta)+cos(theta))
                        show(F)

                        dF = F.diff(theta)
                        show(dF)
                        for solution in solve(dF,theta):
                            show(solution)
                        #[show(solution) for solution in solve(dF,theta)]

                        plot(F(W=50, mu=0.6), (theta,-2*pi,2*pi),ymin=-1000,ymax=1000,detect_poles='show')
                    </input>
                </sage>
            </subsubsection>
        </subsection>

        <subsection>
            <title>Section 2.6 Implicit Differentiation</title>

            <p><index><main>Sage Worked Examples</main><sub>Stewart : Section  2.6, Example 2</sub></index>
                Section 2.6, Example 2 - The Folium Of Descartes
            </p>

            <me>x^3+y^3 = 6 x y</me>

            <p>To plot this function we use the SageMath <em>implicit_plot</em> method.</p>
            <sage>
                <input>
                    x,y = var ('x y')
                    expr=x^3+y^3==6*x*y
                    implicit_plot(expr, (x,-2,5), (y,-2,5), figsize=4, axes="true" )
                </input>
            </sage>

            <p>
                Lets explore this function a bit more with SageMath.  Some of this may not make anysense just now
                but will become clearer as course proceeds.
            </p>

            <sage>
                <input>
                    f(x, y)=x^3+y^3-6*x*y
                    P=contour_plot(f, (x, -3, 5), (y, -3, 5), cmap = 'Reds', contours=range(-50,55,5), colorbar=True)+implicit_plot(f, (x,-3,5), (y,-3,5), figsize=4, axes="true" )
                    show(P)
                    fx(x,y)= f.diff(x)
                    fy(x,y)= f.diff(y)
                    show(fx, fy)

                    pretty_print(html('Solution for $\\frac {\\partial f} {\\partial x} = 0$ and $\\frac {\\partial f} {\\partial y} = 0$'))
                    solutions=solve([fx==0, fy==0], (x, y))
                    for solution in solutions:
                        show(solution)

                    show(f.gradient())
                    H = f.hessian()
                    show(H(x,y))

                    pretty_print(html("And of course if the Hessian has positive determinant and $f_{xx}$ is positive, we have a local minimum."))
                    pretty_print(html("$$f_{xx}=%s$$"%H(2,2)[0,0]))
                    pretty_print(html("$$D=%s$$"%H(2,2).det()))
                    pretty_print(html("$$f_{xx}=%s$$"%H(0,0)[0,0]))
                    pretty_print(html("$$D=%s$$"%H(0,0).det()))
                </input>
            </sage>

            <p>
                Now that we have familiarised our self with the shape of this equation lets now use sage to find the equation of the line at <m>(3,3)</m>.
                Implicit differentiation is required here to compute <m>\frac{dy}{dx}</m> so that we can find the gradient at this point.</p>

            <p> Next find the horizontal axis of the curve by using the <em>solve()</em>
                passing in our expression and the partial derivative (set equal to zero - although this is assumed if we do not explicitly say so).
            </p>

            <p>
                The solutions are printed using a for loop (learn some Python!) and an <em>if</em> statement that prints results
                only if <m>x</m> and <m>y</m> are real - in the 'ring' <em>RR</em>.  There are two solutions,
                which we can see from the plot that this is correct.  Take some time to understand the code used to do the plotting.
            </p>

            <definition xml:id="point_with_coords">
            <index><main>User Defined Functions</main><sub>point_with_coords</sub></index>
            <title>Utility method <c>point_with_coords()</c></title>
                <sage>
                    <input>
                        def point_with_coords(pt, xrange, yrange, color='black', pointsize=30):
                            plt=point(pt,rgbcolor=color, pointsize=pointsize)
                            pt_shifted=(pt[0]+(xrange[2]-xrange[1])/10,pt[1]+(yrange[2]-yrange[1])/10)
                            plt +=text('({0:.2f},{1:.2f})'.format(float(pt[0]),float(pt[1])), pt_shifted, color=color)
                            return plt
                    </input>
                </sage>
            </definition>

            <definition xml:id="cross_hair">
                <index><main>User Defined Functions</main><sub>cross_hair</sub></index>
                <title>Utility method <c>cross_hair()</c></title>
                <sage>
                    <input>
                        def cross_hair(pt, xrange, yrange):
                            plt=point_with_coords(pt,xrange,yrange)
                            pt1=(xrange[1],pt[1])
                            pt2=(xrange[2],pt[1])
                            plt += line([pt1, pt2], linestyle='--')
                            pt1=(pt[0], yrange[1])
                            pt2=(pt[0],yrange[2])
                            plt += line([pt1, pt2], linestyle='--')
                            return plt
                    </input>
                </sage>
            </definition>

            <sage>
                <input>
                    x,y = var('x,y')
                    expr = x^3+y^3==6*x*y
                    show(expr)
                    f(x,y) = expr.lhs() - expr.rhs() # We want f(x,y) = 0.
                    dydx(x,y) = f.implicit_derivative(y,x)
                    show(dydx)

                    xrange = (x,-2,5)
                    yrange = (y,-2,5)

                    pt=(3,3)
                    m=dydx(x=pt[0],y=pt[1])
                    #y=mx+c => c=y-mx (at point (3,3))
                    c=pt[1]-m*pt[0]
                    Y(x) = m*x + c
                    tangent="y={}".format(Y(x))
                    P=plot(Y,xrange,color='red',legend_label=tangent, ymin=yrange[1], ymax=yrange[2])
                    P += point_with_coords(pt, xrange, yrange, color='red', pointsize=60)

                    # Gradient is Horizontal
                    pts=[]
                    for solution in solve([expr, dydx==0],x,y,solution_dict=True):
                        if solution[x] in RR and solution[y] in RR:
                            print("x = {0}   y = {1}".format(solution[x], solution[y]))
                            pts.append((solution[x],solution[y]))

                    P += implicit_plot(expr, xrange, yrange, axes="true" )
                    for pt in pts:
                        P += cross_hair(pt, xrange, yrange)

                    show(P)
                </input>
            </sage>

            <p><index><main>Sage Worked Examples</main><sub>Stewart : Section  2.6, Exercise 3, Page 127</sub></index>
                Section 2.6, Exercise 3, Page 127
            </p>
            <sage>
                <input>
                    x,y = var('x,y')
                    expr=x^3+y^3 == 1
                    show(expr)
                    f(x) = expr.lhs() - expr.rhs() # Notice the '1' has been moved to the same side.
                    dydx = f.implicit_derivative(y,x)
                    show("Derivative: ", dydx)
                </input>
            </sage>
            <p>Summary</p>
            <p>
                Differentiate the full equation with respect to <m>x</m>.  Use the chain rule for <m>y</m> variable results in:
                <me>x \ {\mapsto}\ 3 \, x^{2} + 3 \, y^{2} \frac {dy}{dx} = 0</me>
                Rearranging gives: <me>\frac {dy}{dx} = - \frac {x^2}{y^2}</me></p>

            <p>
                The remaining equations in this section will be solved without explanation.
            </p>

            <p>The following examples make use of this predefined function.  It is not very robust
            and assumes that the <m>expr</m> argumnet is sage Expression type with variable <m>x</m> and <m>y</m>.</p>

            <p>Make sure you run this before running the other examples.  There will be no output but the function
            will be stored in memory available for use in other cells.</p>
            <definition xml:id="my_implicit_derivative">
                <index><main>User Defined Functions</main><sub>my_implicit_derivative</sub></index>
                <tittle>Utility method <c>my_implicit_derivative()</c></tittle>
                <sage>
                    <input>
                        def my_implicit_derivative(expr):
                            show(expr)
                            f(x,y) = expr.lhs() - expr.rhs()
                            dydx = f.implicit_derivative(y,x)
                            pretty_print(r'\frac {dy}{dx}='+LatexExpr(latex(dydx)))
                            # show("Dy=",dydx) #Use this instead of the one above if you are using the online sage notebook.
                            return dydx
                    </input>
                </sage>
            </definition>

            <p><index><main>Sage Worked Examples</main><sub>Stewart : Section  2.6, Exercise 4, Page 127</sub></index>
                Section 2.6, Exercise 4, Page 127
            </p>
            <sage>
                <input>
                    x,y = var('x,y')
                    expr = 2*x^3 + x^2*y - x*y^3 == 2
                    show(expr)
                    f(x) = expr.lhs() - expr.rhs() # Notice the '2' has been moved to the other side.
                    dydx = f.implicit_derivative(y,x)
                    show("Derivative: ", dydx)
                </input>
            </sage>

            <p><index><main>Sage Worked Examples</main><sub>Stewart : Section  2.6, Exercise 5, Page 127</sub></index>
                Section 2.6, Exercise 5, Page 127
            </p>
            <sage>
                <input>
                    x,y = var('x,y')
                    expr = x^2 + x*y - y^2 == 4
                    show(expr)
                    f(x) = expr.lhs() - expr.rhs()
                    dydx = f.implicit_derivative(y,x)
                    show("Derivative: ", dydx)
                </input>
            </sage>

            <p><index><main>Sage Worked Examples</main><sub>Stewart : Section  2.6, Exercise 6, Page 127</sub></index>
                Section 2.6, Exercise 6, Page 127
            </p>
            <sage>
                <input>
                    x,y = var('x,y')
                    expr = y^5 + x^2*y^3 == 1+x^4*y
                    show(expr)
                    f(x) = expr.lhs() - expr.rhs()
                    dydx = f.implicit_derivative(y,x)
                    show("Derivative: ", dydx)
                </input>
            </sage>

            <p><index><main>Sage Worked Examples</main><sub>Stewart : Section  2.6, Exercise 7-16, Page 127</sub></index>
                Section 2.6, Exercise 7 - 16, Page 127
            </p>
            <sage>
                <input>
                    x,y = var('x,y')
                    my_implicit_derivative(y*cos(x) == x^2 + y^2)

                    my_implicit_derivative(cos(x*y) == 1+sin(y))

                    my_implicit_derivative(4*cos(x)*sin(y) == 1)

                    pretty_print(html('\nWhich is the same as $\\frac {dy}{dx} = tan(x)tan(y)$'))

                    my_implicit_derivative(y*sin(x^2) == x*sin(y^2))

                    my_implicit_derivative(tan(x/y) == x+y).simplify_trig()

                    my_implicit_derivative(sqrt(x+y) == 1+x^2*y^2)

                    my_implicit_derivative(sqrt(x*y) == 1+x^2*y).simplify_full()

                    my_implicit_derivative(x*sin(y) +y*sin(x) == 1)

                    my_implicit_derivative(y*cos(x) == 1+sin(x*y))

                    my_implicit_derivative(tan(x-y) == y/(1+x^2))
                    pretty_print('Is this last one correct??!!')
                </input>
            </sage>

            <p><index><main>Sage Worked Examples</main><sub>Stewart : Section  2.6, Exercise 19, Page 127</sub></index>
                Section 2.6, Exercise 19, Page 127
            </p>
            <sage>
                <input>
                    x,y,m= var('x,y,m')
                    expr=x^2+x*y+y^2 == 3
                    dydx = my_implicit_derivative(expr)
                    dydx.show()
                    pt=(1,1)

                    m=dydx(x=1,y=1)
                    #y=mx+c => c=y-mx (at point (1,1))
                    c=pt[1]-m*pt[0]
                    Y(x) = m*x + c
                    tangent="y={}".format(Y(x))
                    P1=point(pt,rgbcolor='black', pointsize=30)
                    P2=implicit_plot(expr, (x,-2,2), (y,-2,2))
                    P3=plot(Y,(x,-2,2),color='red',legend_label=tangent)
                    P1+P2+P3
                </input>
            </sage>

            <p><index><main>Sage Worked Examples</main><sub>Stewart : Section  2.6, Exercise 20, Page 127</sub></index>
                Section 2.6, Exercise 20, Page 127
            </p>
            <sage>
                <input>
                    x,y,m= var('x,y,m')
                    expr=x^2+2*x*y-y^2+x == 2
                    dydx = my_implicit_derivative(expr)
                    dydx.show()
                    pt=(1,2)

                    m=dydx(x=pt[0],y=pt[1])
                    #y=mx+c => c=y-mx (at point (1,1))
                    c=pt[1]-m*pt[0]
                    Y(x) = m*x + c
                    tangent="y={}".format(Y(x))
                    P1=point(pt,rgbcolor='black', pointsize=30)
                    P2=implicit_plot(expr, (x,-10,10), (y,-10,10),axes="true")
                    P3=plot(Y,(x,-5,5),color='red',legend_label=tangent,ymin=-5,ymax=5)
                    P1+P2+P3
                </input>
            </sage>

            <p><index><main>Sage Worked Examples</main><sub>Stewart : Section  2.6, Exercise 21, Page 127</sub></index>
                Section 2.6, Exercise 21 - Cardioid, Page 127
            </p>
            <sage>
                <input>
                    x,y,m= var('x,y,m')
                    expr=x^2+y^2 == (2*x^2+2*y^2-x)^2
                    dydx = my_implicit_derivative(expr)

                    pt=(0,1/2)

                    m=dydx(x=pt[0],y=pt[1])
                    #y=mx+c => c=y-mx (at point (1,1))
                    c=pt[1]-m*pt[0]
                    Y(x) = m*x + c
                    tangent="y={}".format(Y(x))
                    P1=point(pt,rgbcolor='black', pointsize=30)
                    P2=implicit_plot(expr, (x,-1,1), (y,-1,1),axes="true")
                    P3=plot(Y,(x,-1,1),color='red',legend_label=tangent,ymin=-1,ymax=1)
                    P1+P2+P3
                </input>
            </sage>

            <p><index><main>Sage Worked Examples</main><sub>Stewart : Section  2.6, Exercise 23, Page 127</sub></index>
                Section 2.6, Exercise 23 - Lemniscate, Page 127
            </p>
            <sage>
                <input>
                    x,y,m= var('x,y,m')
                    expr=2*(x^2+y^2)^2 == 25*(x^2-y^2)
                    dydx = my_implicit_derivative(expr)
                    pt=(3,1)

                    m=dydx(x=pt[0],y=pt[1])
                    #y=mx+c => c=y-mx (at point (1,1))
                    c=pt[1]-m*pt[0]
                    Y(x) = m*x + c
                    tangent="y={}".format(Y(x))
                    P1=point(pt,rgbcolor='black', pointsize=30)
                    P2=implicit_plot(expr, (x,-5,5), (y,-5,5),axes="true")
                    P3=plot(Y,(x,-5,5),color='red',legend_label=tangent,ymin=-5,ymax=5)
                    P1+P2+P3
                </input>
            </sage>
        </subsection>
    </section>

    <section xml:id="calculus-integration">
        <title>Integration</title>

        <p>Here are some examples of indefinite integrals to demonstrate the power of SageMath:</p>
        <sage>
            <input>
                f = x^3
                show("function:",f,", Indefinite Integral = ",f.integrate(x))
                f= e^x
                show("function:",f,", Indefinite Integral = ",integral(f,x))
                f=1/x
                show("function:",f,", Indefinite Integral = ",integral(f,x))
                f=sinh(x)
                show("function:",f,", Indefinite Integral = ",f.integral(x))
                f=1/sqrt(1+x^2)
                show("function:",f,", Indefinite Integral = ",integral(f,x))

                show("Integration by parts:")
                f=e^x*cos(x)
                show("function:",f,", Indefinite Integral = ",f.integral(x))

                f=sqrt(x^2-25)/x
                show("function:",f,", Indefinite Integral = ",f.integral(x))
            </input>
        </sage>

        <p>Now for some Definite Integrals. For example:</p>
        <me>\int_{-1}^{1} \frac{1}{x^{2} + 1} dx = \frac{1}{2} \, \pi</me>
        <p>This can be confirmed in SageMath quite simply:</p>
        <sage>
            <input>
                f(x)=1/(1+x^2)
                show(f)
                f.integral(x, -1, 1).show()
            </input>
            <output>
                1/2*pi
            </output>
        </sage>
    </section>

    <xi:include href="sage/calculus-sage.xml" />
    <xi:include href="sage/calculus-sage-exercises.mbx" />

    <references>
        <title>References</title>

        <biblio type="raw" xml:id="james_stewart">
            Stuart, James <title>Essential Calculus: Early Transcendentals</title>.
            Second Edition, 2013. ISBN-13: 978-1133112280, ISBN-10: 1133112285
            <url
                    href="https://www.amazon.co.uk/Essential-Calculus-Transcendentals-James-Stewart/dp/1133112285/ref=sr_1_1?ie=UTF8&amp;qid=1482949757&amp;sr=8-1&amp;keywords=9781133112280">
                Amazon UK
            </url>
        </biblio>

        <biblio type="raw" xml:id="sage_tutorial_limits">
            <url href="https://www.sagemath.org/calctut/limits.html">Sage Calculus Tutorial - Limits</url>
        </biblio>

        <biblio type="raw" xml:id="sage_tutorial_continuity">
            <url href="https://www.sagemath.org/calctut/continuity.html">Sage Calculus Tutorial - Continuity</url>
        </biblio>

        <biblio type="raw" xml:id="sage_tutorial_onesided">
            <url href="https://www.sagemath.org/calctut/onesided.html">Sage Calculus Tutorial - One Sided Limits</url>
        </biblio>

        <biblio type="raw" xml:id="sage_tutorial_inflimits">
            <url href="https://www.sagemath.org/calctut/inflimits.html">Sage Calculus Tutorial - Limits At Infinity</url>
        </biblio>

        <biblio type="raw" xml:id="sage_tutorial_slantasymp">
            <url href="https://www.sagemath.org/calctut/slantasymp.html">Sage Calculus Tutorial - Slant Asymptotes</url>
        </biblio>
    </references>

</chapter>
