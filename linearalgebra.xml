<?xml version="1.0" encoding="UTF-8" ?>
<chapter xml:id="linear-algebra-exam" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Linear Algebra</title>

    <introduction>
        <p>
            MATH08057: Introduction to Linear Algebra : December 2016
        </p>
    </introduction>

    <section>
        <title>A1</title>

        <example xml:id="exam_a1">
            <index><main>Linear Algebra Exam</main><sub>A1</sub></index>
            <p>
                Let <m>T</m> be a linear transformation from <m>\mathbb{R}2 \mapsto \mathbb{R}2</m>
                which is a projection and suppose that
                <me>T \left(\begin{array}{r}
                    3 \\
                    1
                    \end{array}\right) = \left(\begin{array}{r}
                    1 \\
                    2
                    \end{array}\right)</me>
                Find the standard matrix of <m>T</m> (The Projection Matrix).
            </p>
            <p>
                <div style="text-align: right"> [6 marks] </div>
            </p>
        </example>

        <p>
            We will use the techniques detailed by Professor Strang in the lecture series 18.06 Linear Algebra
            <url href="https://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/video-lectures/lecture-15-projections-onto-subspaces/">
                Lecture 15: Projections onto subspaces</url>
        </p>
        <figure>
            <image source="images/strang_projection_1.png"/>
            <caption>Diagram Of The Problem</caption>
        </figure>
        <figure>
            <image source="images/strang_projection_2.png"/>
            <caption>Professor Strang In Action</caption>
        </figure>

        <figure xml:id="fig_projection_matrix">
            <image source="images/strang_projection_3.png"/>
            <caption>Projection Matrix Formula</caption>
        </figure>

        <p>
            In these screenshots we can see that vector <m>\vec{p}</m> is the projection of vector <m>\vec{b}</m> onto <m>\vec{a}</m>.
        </p>
        <p>
            <m>\vec{p}</m> is a multiple,<m>x</m>, of <m>\vec{a}</m>:
            <me>\vec{p} = x \vec{a}</me>
            The error vector <m>\vec{e}</m> is given by:
            <me>\vec{e}=\vec{b}-\vec{p}</me>
            The other piece of information we require is that <m>\vec{e}</m> is perpendicular to <m>\vec{p}</m>.
            In other words, the dot product of these two vectors is zero. Recall that the dot product of two vectors is
            the same as the <em>transpose</em> of one with the other.</p>
        <p>
            Combining the above gives us:
        </p>
        <me>\vec{a}^T (\vec{b} - x \vec{a}) = 0</me>
        <me>\implies x = \frac{\vec{a}^T \vec{b}}{\vec{a}^T \vec{a}}</me>
        <p>
            Since <m>\vec{p} = x \vec{a}</m> then:
        </p>
        <men>\vec{p} = \frac{\vec{a} \vec{a}^T}{\vec{a}^T \vec{a}} \vec{b}</men>
        <p>
            From this we can see that the Projection Matrix, <m>\textbf{P}</m>, is given by:
        </p>

        <men>\textbf{P} = \frac{\vec{a} \vec{a}^T}{\vec{a}^T \vec{a}}</men>

        <p>
            This matches the formula in the screenshot shown in <xref ref="fig_projection_matrix">figure</xref> above.
            In our exercise <m>\textbf{P}</m> becomes <m>\textbf{T}</m>.
        </p>
        <p>
            Now lets see how we can solve this example using SageMath.
        </p>

        <p>
            One of the most annoying points is that vectors are represented as rows.
            Usually, we prefer to write them in column form.  However, we can switch the view by
            using the <c>column()</c> method on the vector.
        </p>

        <sage>
            <input>
                a=vector([1,2])
                b=vector([3,1])
                show(a)
                show("a = ", a.column())
                show(b)
                show("b = ", b.column())
            </input>
        </sage>

        <p>
            The vector <m>\vec{a}</m> times the transpose of itself can be found by taking the <c>outer_product()</c>:
        </p>
        <sage>
            <input>
                show(a.outer_product(a))
            </input>
        </sage>

        <p>The dot product (inner product) given by <m>\vec{a}^T \vec{a}</m> is easily found by either of these two steps:</p>
        <sage>
            <input>
                show(a*a)
                show(a.inner_product(a))
            </input>
        </sage>

        <p>
            Combining these we get the complete solution for <m>\textbf{T}</m>,
            what Strang calls <m>\textbf{P}</m> as:
        </p>
        <sage>
            <input>
                T=a.outer_product(a)/(a*a)
                show("Projection Matrix, T = ",T)
            </input>
        </sage>

        <p>
            These concepts are combined with some fancy plotting methods to give us a nice visualisation of the problem:
        </p>
        <sage>
            <input>
                def plot2d_vector(v,name,color='blue'):
                    p=plot(v,color=color)
                    delta=v*v/40
                    midpoint=(v[0]/2+delta,v[1]/2+delta)
                    p += text(name, midpoint,fontweight='extra bold',fontsize=14,color='black')
                    return p

                b=vector([3,1])
                a=vector([1,2])*2
                show("a = ", a.column())
                show("b = ", b.column())

                T=a.outer_product(a)/(a*a)
                show("Projection Matrix, T = ",T)

                p=T*b
                show("projection, Tb = ", p.column())
                e=b-p
                show("error = ",e.column())

                e_midpoint = ((b[0]+p[0])/2 + e*e/20, (b[1]+p[1])/2 + e*e/20)

                show("Projection of b onto a:")

                plt=plot2d_vector(a, "a")+plot2d_vector(b, "b")+ plot2d_vector(p,"p",color='red')+arrow(p, b, linestyle='--', color='green',aspect_ratio='1')
                plt += text("e", e_midpoint,fontweight='extra bold',fontsize=14,color='black')
                plt
            </input>
        </sage>
        <p>
            Notice that the diagram is <em>upside down</em> compared with Strang's and that we multiplied
            <m>\vec{a}</m> by a factor of 2 so that we could more clearly see that <m>\vec{p}</m> lies on the same line as <m>\vec{a}</m>.
        </p>

        <p>Let us now check some other properties of the projection matrix <m>\textbf{T}</m></p>
        <sage>
            <input>
                show("Is invertible = ", T.is_invertible())
                show("Is symmetric = ", T.is_symmetric())
                show("Is the same as its transpose = ", T.transpose() == T)
                show("Is the same as its square = ", T*T == T)
            </input>
        </sage>
    </section>

    <section>
        <title>A2</title>

        <example xml:id="exam_a2">
            <index><main>Linear Algebra Exam</main><sub>A2</sub></index>
            <p>

                Let <m>A</m> be a subspace of <m>\mathbb{R}3</m> of dimension 2 and let <m>\vec{b}</m> be
                a fixed non-zero vector in <m>\mathbb{R}3</m>.
            </p>
            <p>
                Let <m>A′</m> denote the subset of <m>\mathbb{R}3</m> consisting of all vectors of the
                form <m>\vec{a} + \vec{b}</m> where <m>\vec{a}</m> is in the
                subspace <m>A</m>.
            </p>
            <p>
                For which vectors <m>\vec{b}</m> is <m>A′</m> also a subspace? Justify your answer.
            </p>
            <p>
                <div style="text-align: right"> [7 marks] </div>
            </p>
        </example>

        <p>
            Before grappling this problem it helps  to get a picture.  I believe this is the best way to approach any problem.
            (Maybe this is just the old physicist in me).  Sometimes it is not possible but not very often.
        </p>
        <p>
            So lets first look at how SageMath can help us here. Since <m>A</m> is a subspace <m>\mathbb{R}3</m> then it must
            be a plane passing through the origin; subspaces must contain the <m>\left\{0\right\}</m> vector and pass through the origin.
        </p>

        <p>
            Take, for example, the plane passing through the origin given by:
            <me>2x+3y-z = 0</me>
        </p>

        <p>
            Consider the case where our vector <m>\vec{a}</m> is the direction vector starting at position <m>(2,2,2)</m>
            and extending to <m>(3,4,5)</m>. This lies on the plane going through the origin and is our subspace <m>A</m>.
        </p>

        <p>
            Let the point <m>P</m>  be the start of <m>\vec{a}</m> and the point <m>Q</m> be the endpoint.
            These points are also the position vectors <m>\vec{OP}</m> and <m>\vec{OQ}</m> and also lie on the
            plane (since the origin is on the plane).  Hence, a normal to the plane is given by the cross-product:
        </p>

        <me>\vec{n} = \vec{OP} \times \vec{a}</me>

        <p>
            (We could have taken the cross product of any of these three vectors since they are all in the same plane.)
        </p>

        <p>
            We know that the dot product of the normal <m>\vec{n}</m> with any of our three vectors should be zero. This
            enables us to use <code>implicit_plot3d()</code> with an implicit equation for any point on the plane.
            We have defined <m>f(x,y,z)</m> as the function to represent any point on this plane. In the sage cell
            this is achieved by the following technique:
            <pre>
                p = vector([x, y, z])
                pA = a - p
                f(x,y,z) = n.dot_product(pA)
            </pre>

            The resultant function is:
            <me>2 x - 4 y + 2 z = 0</me>
        </p>

        <p>
            Now we have all we need to plot the plane. There are several ways of plotting this plane in SageMath.
            The one adopted here is to use <code>implicit_plot3d()</code>.  We pass into this method the above
            function <m>f</m> set equal to zero and the <m>x,y,z</m> ranges. The next Sage Cell brings this together.
            Our vector <m>\vec{a}</m> is the yellow arrow,  the origin is shown as the black dot in the centre,
            the plane is drawn in blue, and the normal vector is the blue arrow.
        </p>

        <p>
            Now add another vector <m>\vec{b}</m> which is also on the same plane. This shown as the green arrow.
            To do this we introduce another point <m>S=(-1,2,5)</m>.  You might wonder how we know that this
            point lies on our plane.  It was found using the following trick.
            <pre>
                f=n[0]*x+n[1]*y+n[2]*z==0
                show(f(x=-1,y=2))
            </pre>
            Here <m>n[0]</m> is the <m>x</m>-coordinate of the normal, <m>n[1]</m> is the <m>y</m>-coordinate, and so on.
            They are the coefficients of the standard equation of a plane (<m>a x + b y + c z = d</m>). With <m>d = 0</m>
            is the plane case when the plane passes through the origin.  The results are: <me>2 z - 10 = 0</me>

            From this, we can find the <m>z</m>-coordinate of <m>S</m> which ensure that the point fits onto
            our plane.
        </p>

        <p>
            Now for the full picture.  Lets find another vector <m>\vec{c}</m> that does not lie on our plane.
            Lets also form another plane which contains this new vector and vector <m>\vec{a}</m> (the yellow arrow).
        </p>

        <p>
            Lets try the point <m>R=(5,0,3)</m>.
        </p>

        <sage>
            <input>
                var ('x,y,z')
                ptP=(2,2,2)
                ptQ=(3,4,5)

                OP=vector(ptP);
                OQ=vector(ptQ);

                show("OP = ",OP.column())
                show("OQ = ",OQ.column())

                a=OQ-OP
                show("a = OQ - OP =",a.column())

                n=OP.cross_product(a);
                show("Normal to plane = ", n.normalized().column())

                f=n[0]*x+n[1]*y+n[2]*z==0
                show(f(x=1,y=3))
                show(f(x=-1,y=2))

                # p (lower case) is any position vector on the plane. Since 'a' is on the plane
                # we can write an general equation for the plane by this trick:
                p = vector([x, y, z])
                pA = a - p;
                f(x,y,z) = n.dot_product(pA)
                show("f(x,y,z) = ", f)

                #The Origin
                P0 = point3d((0, 0, 0), color = 'black', size = 15)

                # Vector a
                a_arrow=arrow(OP,OQ,color='yellow',width=10)
                n_arrow=arrow((0,0,0),n,color='blue',width=10)

                ptS=(-1,2,5)
                OS=vector(ptS);

                show("OS = ",OS.column())

                b=OS-OP
                show("b = OS - OP =",b.column())
                b_arrow=arrow(OQ,OS,color='green',width=10)


                ptR=(5,0,3)
                OR=vector(ptR)
                show("OR = ",OR.column())

                c=OR-OP
                show("c = OR - OP =",c.column())
                c_arrow=arrow(OQ,OR,color='black',width=10)

                n2=a.cross_product(c)

                pC = c - p;
                g(x,y,z) = n2.dot_product(pC)
                show("g(x,y,z) = ", g)

                plane=implicit_plot3d(f, (x, -10, 10), (y, -10, 10), (z, -10, 10), color = 'blue',opacity=0.6)
                plane2=implicit_plot3d(g, (x, -10, 10), (y, -10, 10), (z, -10, 10), color = 'green',opacity=0.6)
                final_plot = P0 + a_arrow + b_arrow + c_arrow + n_arrow + plane + plane2
                final_plot.show(aspect_ratio=1)
            </input>
        </sage>

        <p>
            From this plot you can see that <m>\vec{a}</m> is indeed on a plan passing through the origin.
        </p>
        <p>
            If you have java activated in your browser you should then be able to click on the plot and rotate it
            and get a better view of the setup.
        </p>


        <sage>
            <input>
                var ('x,y,z')
                ptP=(2,2,2)
                ptQ=(3,4,5)
                ptR=(5,0,7)
                ptS=(-2,4,10)

                P=vector(ptP);
                Q=vector(ptQ);
                R=vector(ptR)
                S=vector(ptS)

                nPQ=P.cross_product(Q);
                show("nPQ = ", nPQ.normalized())

                nPR=P.cross_product(R);
                show("nPR = ", nPR.normalized())

                nPS=P.cross_product(S);
                show("nPS = ", nPS.normalized())

                nQR=Q.cross_product(R);
                show("nQR = ", nQR.normalized())

                nQS=Q.cross_product(S);
                show("nQS = ", nQS.normalized())

                nRS=R.cross_product(S);
                show("nRS = ", nRS.normalized())


                a=Q-P
                b=S-P
                b2=R-P

                show("a X b = ", a.cross_product(b))
                show("a X b2 = ", a.cross_product(b2))

                n=P.cross_product(Q);
                show(n.normalized())

                f=n[0]*x+n[1]*y+n[2]*z==0
                f(x=1,y=3,z=5)
                f(x=-1,y=2,z=5)

                n2=P.cross_product(S)
                show(n2.normalized())
                n3=a.cross_product(b2)
                show(n3.normalized())


                pv = vector([x, y, z])
                AQ = pv - Q; AQ;
                BR = pv - R; BR;

                P0 = point3d((0, 0, 0), color = 'black', size = 10)
                a_arrow=arrow(P,Q,color='red',width=10)
                b_arrow=arrow(P,S,color='green',width=10)
                b2_arrow=arrow(P,R,color='black',width=10)
                n_arrow=arrow((0,0,0),n,color='purple',width=10)
                n3_arrow=arrow(P,n3,color='purple',width=10)
                show("n3 dot BR = ", n3.dot_product(BR))


                plane=implicit_plot3d(n.dot_product(AQ), (x, -10, 10), (y, -10, 10), (z, -10, 10), color = 'blue',opacity=0.6,aspect_ratio=1)
                plane2=implicit_plot3d(n3.dot_product(BR), (x, -10, 10), (y, -10, 10), (z, -10, 10), color = 'green',opacity=0.6,aspect_ratio=1)
                final_plot=P0+a_arrow+b_arrow+b2_arrow+n_arrow+plane+n_arrow+plane2+n3_arrow
                final_plot.show(aspect_ratio=1)
            </input>
        </sage>
    </section>


</chapter>
